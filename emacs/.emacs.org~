#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /home/khabir/.emacs

* Basic UI 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)      ;; start with plan text
  (scroll-bar-mode -1)                  ;; disable visible scroll bar
  (tool-bar-mode -1)                    ;; disable toolbar that includes icons
  ;;(menu-bar-mode -1)                    ;; disable menu var includes file edit view so on
  (set-fringe-mode 10)                  ;; ar:lhamix, 
  ;;               **                   ;; width of the fringe
  (tooltip-mode 1)                     ;; Tooltips are small special frames that display text 
                                        ;; information at the current mouse position(hover)
  (setq visible-bell t)               
  (column-number-mode)                  ;; add column number in line mode
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)
#+end_src          

* Tab width
#+begin_src emacs-lisp
  ;; tab width custom
  (setq-default tab-width 2)
  (setq-default c-basic-offset 2)
  (setq-default evil-shift-width 2)
#+end_src

* Package and Package Manager
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  #+END_SRC
* General package
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer ahk/leader-keys
      :keymaps  '(normal insert visual emacs)
      :prefix "SPC"	
      :global-prefix "C-SPC")						

    (ahk/leader-keys
      "t"  '(:ignore t  :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ts" '(hydra-text-scale/body :which-key "scale text")
      "n"  '(:ignore r  :which-key "Roam")
      "nl" '(org-roam-buffer-toggle :which-key "buffer toggle")
      "nf" '(org-roam-node-find :which-key "node find")
      "ni" '(org-roam-node-insert :which-key "node insert")
      "nd" '(org-roam-dailies-map :which-key "node insert")
      "p"  '(projectile-command-map :which-key "projectile")
      "b"  '(persp-switch-to-buffer* :which-key "buffer switch")
      "r"  '(quickrun-shell :which-key "run")
      "e"  '(treemacs :which-key "treemacs")
      "w"  '(save-buffer :which-key "write")
      "q"  '(kill-buffer-and-window :which-key "quit")
      "c"  '(:ignore t :which-key "commenting")		 
      "cd" '(comment-dwim :which-key "document")
      "s"  '(flyspell-auto-correct-word :which-key "spell")
      "m"  '(mpv-insert-playback-position :which-key "mpv playback")))
#+end_src

* General key-bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h v") 'helpful-variable)
  (global-set-key (kbd "C-h f") 'helpful-function)
#+end_src

* Which Key
#+begin_src emacs-lisp
 (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
* Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (Counsel-Describe-Function-Function #'Helpful-Callable)
    (Counsel-Describe-Variable-Function #'Helpful-Variable)
    :bind
    ([Remap Describe-Function] . Helpful-Callable)
    ([Remap Describe-Command] . Helpful-Command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Appearance
  #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-monokai-classic t))
  #+END_SRC
** Icons 
#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package nerd-icons-dired)
  (use-package all-the-icons)
#+end_src

** Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

* Ivy and Related Packages
  #+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-next-line)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (counsel-mode 1))

    (use-package ivy-rich
      :after ivy
      :init
      (ivy-rich-mode 1))
  #+end_src
* Evil 
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    ;;Exit insert mode by pressing j and then j quickly
  ;;	(setq key-chord-two-keys-delay 0.1)
  ;;	(key-chord-define evil-insert-state-map "kj" 'evil-force-normal-state)
  ;;	(key-chord-mode 1)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (evil-define-key '(normal visual) 'global (kbd "<escape>") 'keyboard-escape-quit)
  (evil-define-key '(normal visual) 'global (kbd "gcc") 'comment-line)
#+end_src

* Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil ;; after evil loads
    :config
    (evil-collection-init))
#+end_src

* Hydra
#+begin_src emacs-lisp
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src

* Projectile
#+begin_src elisp
  ;; (use-package projectile
  ;;   :ensure t
  ;;   :init
  ;;   (projectile-mode +1)
  ;;   :bind (:map projectile-mode-map
  ;;               ("s-p" . projectile-command-map)
  ;;               ("c-c p" . projectile-command-map)))
  ;; (use-package projectile
  ;;   :diminish projectile-mode
  ;;   :config (projectile-mode)
  ;;   :custom ((projectile-completion-system 'ivy))
  ;;   :bind-keymap
  ;;   ("c-c p" . projectile-command-map)
  ;;   :init
  ;;   ;; NOTE: Set this to the folder where you keep your Git repos!
  ;;   (when (file-directory-p "~/pr/python/projects")
  ;;     (setq projectile-project-search-path '("~/pr/python/projects")))
  ;;   (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Counsel Projectile
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-diepslay-buffer-function #'magit-dispaly-buffer-smae-window-except-diff-v1))
#+end_src

* Org
** Org Mode Basics
#+begin_src emacs-lisp
  (defun ahk/org-mode-setup()
    (auto-fill-mode t)
    (set-fill-column 90)
    (org-indent-mode)
    (org-shifttab)
    (variable-pitch-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . ahk/org-mode-setup)
    :config
    (setq org-agenda-files
          '("~/emacs-config-notes.org"))
    (setq org-ellipsis " ▾"  
          org-hide-emphasis-markers t)
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "QUESTION(q)" "GUESS(g)" "|" "ANSWERED(s!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))))
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org Visual Fill
#+begin_src emacs-lisp
  (defun ahk/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
     :hook (org-mode . ahk/org-mode-visual-fill))
#+end_src

** Configure custom agenda views
#+begin_src emacs-lisp
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))
#+end_src
* Replace list hyphen with dot
#+begin_src emacs-lisp
    ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
* Org Font Faces
#+begin_src emacs-lisp
  (defun ahk/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
  (set-face-attribute 'org-level-1 nil :weight 'semi-bold :height 1.5 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-2 nil :weight 'semi-bold :height 1.4 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-3 nil :weight 'semi-bold :height 1.3 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-4 nil :weight 'semi-bold :height 1.2 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-5 nil :weight 'semi-bold :height 1.1 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-6 nil :weight 'semi-bold :height 1.0 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-7 nil :weight 'semi-bold :height 1.0 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-8 nil :weight 'semi-bold :height 1.0 :family "Ubuntu Medium"))


  (add-hook 'org-mode-hook #'ahk/org-mode-hook)
#+end_src
* Remove Line Number
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (defun remove-line-numbers()
    "Disable line numbers."
    (display-line-numbers-mode -1))

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook		
                  eshell-mode-hook
                  custom-mode-hook
                  emacs-lisp-mode-hook
                  helpful-mode-hook
                  help-mode-hook))
    (add-hook mode 'remove-line-numbers)) 
  ;; end disable line numbers
#+end_src
* Org Template
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell :results output"))
  (add-to-list 'org-structure-template-alist '("el" . "src elisp :results output"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
  (add-to-list 'org-structure-template-alist '("q" . "quote"))
  (add-to-list 'org-structure-template-alist '("j" . "src js :results output"))
#+end_src
* Babel
** Basic 
#+begin_src emacs-lisp
    (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
            (python     . t)
            (js         . t)))

      (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-confirm-babel-evaluate nil)

#+end_src
** Babel for Js
#+begin_src emacs-lisp
(require 'ob-js)

(add-to-list 'org-babel-load-languages '(js . t))
(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
(add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+end_src
** Auto-tangle Configuration Files
This snippet adds a hook to =org-mode= buffers so that =ahk/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun ahk/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "/home/khabir/.dotfiles/emacs/.emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate t))
        (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ahk/org-babel-tangle-config)))
#+end_src
*** Understanding The Code 
#+begin_src emacs-lisp :results output
(print (expand-file-name "~/.dotfiles/emacs/.emacs.org"))
#+end_src

#+RESULTS:
: "/home/khabir/.dotfiles/emacs/.emacs.org"
---
#+begin_src emacs-lisp :result output
(print buffer-file-name)
#+end_src

#+RESULTS:
: /home/khabir/.dotfiles/emacs/.emacs.org
---
#+begin_src emacs-lisp :result output

(print (string-equal (buffer-file-name)
                        (expand-file-name "/home/khabir/.dotfiles/emacs/.emacs.org")))
#+end_src

#+RESULTS:
: t

* spelling 
#+begin_src emacs-lisp
  ;; spelling 
    (use-package flyspell)
    (dolist (hook '(text-mode-hook
                    org-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1)(unbind-key "C-M-i"))))

    (use-package smex)
#+end_src
To disable =C-M-i= binding for =completion-at-point=
#+begin_src emacs-lisp :result output
  (defun ahk/disable-flyspell-key()
    (eval-after-load "flyspell"
    '(define-key flyspell-mode-map (kbd "C-M-i") nil)))
  (add-hook 'org-mode-hook 'ahk/disable-flyspell-key)
#+end_src

* Org Align Tags
#+begin_src emacs-lisp
(add-hook 'focus-in-hook 
    (lambda () (progn 
      (setq org-tags-column (- 10 (window-body-width)))) (org-align-all-tags)))

  (add-hook 'focus-out-hook 
    (lambda () (progn 
      (setq org-tags-column (- 10 (window-body-width)))) (org-align-all-tags)))
#+end_src
* MPV
#+begin_src emacs-lisp
  (use-package mpv)
#+end_src

* kj normal mode
#+begin_src emacs-lisp
  (defun my-evil-normal-after-k (key)
    (interactive "c")
    (if (and (eq last-command-event ?k)
             (eq key ?j))
        (evil-normal-state)
      (insert-char last-command-event)
      (insert-char key)))

  (define-key evil-insert-state-map "k" 'my-evil-normal-after-k)
#+end_src

* Links mpv zathura
#+begin_src emacs-lisp
(defun org-mpv-open (path)
  (start-process "mpv" nil "mpv" path))
(org-add-link-type "mpv" 'org-mpv-open)

(defun org-zathura-open (path)
	(start-process "zathura" nil "zathura" path))
(org-add-link-type "doc" 'org-zathura-open)
#+end_src

* Dev
Video:[[mpv:/home/khabir/vids/emacs/Emacs_From_Scratch_#8-Build_Your_Own_IDE_with_lsp-mode.webm][JS IDE]]
** Lsp
*** Lsp Mode
There built in major modes for deferent languages like .py .js .c .c++ ...
But for TypeScript (example) you have to download it's major mode
Then Install the server for each language
#+begin_src emacs-lisp

  (defun ahk/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)
    (electric-pair-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . ahk/lsp-mode-setup)
           ((python-mode c-mode js-mode) . lsp-deferred))
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src
*** Lsp UI
#+begin_src emacs-lisp

  ;; (use-package lsp-ui
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))
  (use-package lsp-ui
    :config (setq lsp-ui-sideline-show-hover t
                  lsp-ui-sideline-delay 0.5
                  lsp-ui-doc-delay 5
                  lsp-ui-sideline-ignore-duplicates t
                  lsp-ui-doc-position 'bottom
                  lsp-ui-doc-alignment 'frame
                  lsp-ui-doc-header nil
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-use-childframe t)
    :commands lsp-ui-mode
    :bind (:map evil-normal-state-map
                ("gd" . lsp-ui-peek-find-definitions)
                ("gr" . lsp-ui-peek-find-references)))
#+end_src
*** Lsp-treemacs 

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp
    :bind(("SPC-e" . 'treemacs)))
(add-hook 'treemacs-mode-hook 'treemacs-toggle-fixed-width)
#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

** Completion
Run the command completion-at-point(C-M-i)
** Functions Help
when you open a parentheses like print( echo area show info about the page you see 1/2, to
go to 2/2 use M-n and M-p
0:21:31: Show also when you hover (not just mouse)
Click with mouse for more info
** References  0:21:54 
built in when you hover
0:24:30: rename in all refrences with C-c l r r 
** Diagnostics And showing errors
0:26:38: flymake-diagnostics-buffer
** Code Actions
C-c l a a
In python until now it don't work and the light bale don't show up 
** Formatting
Don't work
** Python
Video: [[mpv:/home/khabir/vids/emacs/ide/Emacs_IDE-Python_Development_Configuration.webm][python ide]]
Try:
=python-shell-send-region= you need to select the region
=python-shell-send-file= choose a file from disk
=python-shell-send-buffer= 
=python-shell-send-defun= put your cursor on a function and run the command it will demand
how you want to call the function 00:12:22

You need to import the project when they as you in order to work,
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred))
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    
    ;; (dap-python-executable "python3")
  ;;   (dap-python-debugger 'debugpy)
  ;; ;
                                          ;   :config
  ;; ;
                                          ;   (require 'dap-python))
  ;; ;
                                          ; (setq python-indent-offset 2)
#+end_src
*Solving indentation in code blocks*
#+begin_src emacs-lisp
  ;; (setq org-startup-indented t)
  ;; (setq python-indent-guess-indent-offset t)  
  ;; (setq python-indent-guess-indent-offset-verbose nil)
  ;; (setq org-edit-src-code-indentation 2)
#+end_src
** JavaScript
#+begin_src emacs-lisp
(setq js-indent-level 2)
(add-hook 'prog-mode-hook #'lsp)
#+end_src
** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)

    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
      (push 'company-capf company-backends))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
** Integration with yasnippet
#+begin_src elisp :results output
  (defun company-yasnippet-or-completion()
    (interactive)
    (let ((yas-fallback-behavior nil))
      (unless (yas-expand)
        (call-interactively #'company-complete-comon))))

  (add-hook 'company-mode-hook (lambda()
                                 (substitute-key-definition 'company-complete-common
                                                            'company-yasnippet-or-completion
                                                            company-active-map)))
#+end_src

* Window Resizing bindings
#+begin_src emacs-lisp
    (global-set-key (kbd "C-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "C-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "C-<down>") 'shrink-window)
    (global-set-key (kbd "C-<up>") 'enlarge-window)
#+end_src

* YaySnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yay-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
(use-package yasnippet-snippets)
#+end_src
** Examples
*** For loop
M-x =yas-new-snippet=
#+begin_export html
# -*- mode: snippet -*-
# name: head 
# key: head 
# --

#+TITLE: ${1:title}
#+PROPERTY: header-args:emacs-lisp :tangle ${2:file}

$0
#+end_export


#+begin_src python
print("hello")
#+end_src

* Promodoro
run the command =org-timer-set-timer= and type the num of minutes you want.
You can pause it and resume it 
sound not working for my drive(?)
#+begin_src emacs-lisp
(setq org-clock-sound "/home/khabir/msc/ding.wav")
#+end_src

* Surround
#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

* Remembering Mini Buffer Prompt History 
Save history even after leaving
M-n(next) and M-p (previous)
#+begin_src emacs-lisp
(savehist-mode t)
#+end_src
** TODO Sound not working
* Save Place -Mode

#+begin_src emacs-lisp
;; Remember the place where you left it last visit
(save-place-mode t)
#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp
  ;; (setq backup-directory-alias '(("." . ,(expand-file-name ))))
    ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
    ;; reliably, set `user-emacs-directory` before loading no-littering!
    ;(setq user-emacs-directory "~/.cache/emacs")

    (use-package no-littering)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
You can turn off backups:

#+begin_src emacs-lisp :tangle no
(setq make-backup-files nil)
#+end_src
* Org Rom
insert: you can insert a node that don't exist yet

=M-x org-id-get-create= : make a heading a node. use it when you want a heading to be a node
but not creating a file for it

What if some nodes have the same name (they are different because of the id): use Alias
with =M-x org-roam-alias-add= command. but don't get yourself to this case

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/docs/roam-notes")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%I:%M %p>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point)
          :map org-roam-dailies-map
          ("Y" . org-roam-dailies-capture-yesterday)
          ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

  #+end_src
* Auto Pairs 
#+begin_src emacs-lisp :result output
(add-hook 'prog-mode-hook 'electronic-pair-mode)

(add-hook 'text-mode-hook 'electronic-pair-mode)
#+end_src>
* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

**** TODO Set binding to create folder and empty file
*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Arabic Support
=C-x RET C-\= to change language (input method), don't change the keyboard layout on your
system
then add this propriety to org mode =#+LANGUAGE: ar=
#+begin_src emacs-lisp :results output
(defun set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
(add-hook 'org-mode-hook 'set-bidi-env)
#+end_src

* Terminal
#+begin_src emacs-lisp :results output
(use-package vterm)
#+end_src

* Window Management
The =persp-switch= command (=C-x x s=) will prompt you for the name of a perspective to switch to. If you enter a name for a perspective that doesn’t exist yet, it will be created.
#+begin_src emacs-lisp
  (use-package perspective
    :bind (("C-x b" . persp-switch-to-buffer*)
           ("C-x C-b" . persp-switch-to-buffer*)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-mode-prefix-key (kbd "C-x x"))
    :config
    (persp-mode))
#+end_src
* Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "monospace" :height 130)
#+end_src

