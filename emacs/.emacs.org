#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs


* Basic UI 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)      ;; start with plan text
  (scroll-bar-mode -1)                  ;; disable visible scroll bar
  (tool-bar-mode -1)                    ;; disable toolbar that includes icons
  ;;(menu-bar-mode -1)                    ;; disable menu var includes file edit view so on
  (set-fringe-mode 10)                  ;; ar:lhamix, 
  ;;               **                   ;; width of the fringe
  (tooltip-mode 1)                     ;; Tooltips are small special frames that display text 
                                        ;; information at the current mouse position(hover)
  (setq visible-bell t)               
  (column-number-mode)                  ;; add column number in line mode
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)
#+end_src

* Tab width
#+begin_src emacs-lisp
  ;; tab width custom
  (setq-default tab-width 2)
  (setq-default c-basic-offset 2)
  (setq-default evil-shift-width 2)
#+end_src

* Package and Package Manager
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  #+END_SRC
* Ivy and Related Packages
  #+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-next-line)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind (;;("M-x" . 'counsel-M-x)
           ("C-M-j" . 'counsel-switch-buffer))
    ;; :map minibuffer-local-map
    ;; ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
  #+end_src
* Which Key
#+begin_src emacs-lisp
 (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
* Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (Counsel-Describe-Function-Function #'Helpful-Callable)
    (Counsel-Describe-Variable-Function #'Helpful-Variable)
    :bind
    ([Remap Describe-Function] . Helpful-Callable)
    ([Remap Describe-Command] . Helpful-Command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Appearance
  #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-monokai-classic t))
  #+END_SRC
** Icons 
#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package nerd-icons-dired)
  (use-package all-the-icons)
#+end_src

** Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

* General key-bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h v") 'helpful-variable)
  (global-set-key (kbd "C-h f") 'helpful-function)
#+end_src

* General package
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer ahk/leader-keys
      :keymaps  '(normal insert visual emacs)
      :prefix "SPC"	
      :global-prefix "C-SPC")							

    (ahk/leader-keys
      "t"  '(:ignore t  :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ts" '(hydra-text-scale/body :which-key "scale text")
      "p"  '(projectile-command-map :which-key "projectile")
      "e"  '(treemacs :which-key "treemacs")
      "c"  '(:ignore t :which-key "commenting")		 
      "cd" '(comment-dwim :which-key "document")
      "m" '(mpv-insert-playback-position :which-key "mpv playback"))) 
#+end_src

* Evil 
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    ;;Exit insert mode by pressing j and then j quickly
  ;;	(setq key-chord-two-keys-delay 0.1)
  ;;	(key-chord-define evil-insert-state-map "kj" 'evil-force-normal-state)
  ;;	(key-chord-mode 1)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (evil-define-key '(normal visual) 'global (kbd "<escape>") 'keyboard-escape-quit)
  (evil-define-key '(normal visual) 'global (kbd "gcc") 'comment-line)
#+end_src

* Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil ;; after evil loads
    :config
    (evil-collection-init))
#+end_src

* Hydra
#+begin_src emacs-lisp
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map)))
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/pr/python/projects")
      (setq projectile-project-search-path '("~/pr/python/projects")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Counsel Projectile
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-diepslay-buffer-function #'magit-dispaly-buffer-smae-window-except-diff-v1))
#+end_src

* Org
** Org Mode Basics
#+begin_src emacs-lisp
  (defun ahk/org-mode-setup()
    (auto-fill-mode t)
    (set-fill-column 90)
    (org-indent-mode)
    (variable-pitch-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . ahk/org-mode-setup)
    :config
    (setq org-agenda-files
          '("~/t/todos.org" "~/emacs-config-notes.org"))
    (setq org-ellipsis " ▾"  
          org-hide-emphasis-markers t)
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "QUESTION(q)" "GUESS(g)" "|" "ANSWERED(s!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))))
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org Visual Fill
#+begin_src emacs-lisp
  (defun ahk/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
     :hook (org-mode . ahk/org-mode-visual-fill))
#+end_src

** Configure custom agenda views
#+begin_src emacs-lisp
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))
#+end_src
* Replace list hyphen with dot
#+begin_src emacs-lisp
    ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
* Org Font Faces
#+begin_src emacs-lisp
  (defun ahk/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
  (set-face-attribute 'org-level-1 nil :weight 'semi-bold :height 1.5 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-2 nil :weight 'semi-bold :height 1.4 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-3 nil :weight 'semi-bold :height 1.3 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-4 nil :weight 'semi-bold :height 1.2 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-5 nil :weight 'semi-bold :height 1.1 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-6 nil :weight 'semi-bold :height 1.0 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-7 nil :weight 'semi-bold :height 1.0 :family "Ubuntu Medium")
  (set-face-attribute 'org-level-8 nil :weight 'semi-bold :height 1.0 :family "Ubuntu Medium"))


  (add-hook 'org-mode-hook #'ahk/org-mode-hook)
#+end_src
* Remove Line Number
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (defun remove-line-numbers()
    "Disable line numbers."
    (display-line-numbers-mode -1))

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook		
                  eshell-mode-hook
                  custom-mode-hook
                  emacs-lisp-mode-hook
                  helpful-mode-hook
                  help-mode-hook))
    (add-hook mode 'remove-line-numbers)) 
  ;; end disable line numbers
#+end_src
* Org Template
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("q" . "quote"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
#+end_src
* Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "monospace" :height 130)
#+end_src
* Babel
#+begin_src emacs-lisp
      (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
            (python . t)))

      (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-confirm-babel-evaluate nil)

#+end_src

* spelling 
#+begin_src emacs-lisp
;; spelling 
  (use-package flyspell)
  (dolist (hook '(text-mode-hook
                  org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

  (use-package smex)
#+end_src

* Org Align Tags
#+begin_src emacs-lisp
(add-hook 'focus-in-hook 
    (lambda () (progn 
      (setq org-tags-column (- 10 (window-body-width)))) (org-align-all-tags)))

  (add-hook 'focus-out-hook 
    (lambda () (progn 
      (setq org-tags-column (- 10 (window-body-width)))) (org-align-all-tags)))
#+end_src
* MPV
#+begin_src emacs-lisp
  (use-package mpv)
#+end_src

* kj normal mode
#+begin_src emacs-lisp
  (defun my-evil-normal-after-k (key)
    (interactive "c")
    (if (and (eq last-command-event ?k)
             (eq key ?j))
        (evil-normal-state)
      (insert-char last-command-event)
      (insert-char key)))

  (define-key evil-insert-state-map "k" 'my-evil-normal-after-k)
#+end_src

* Links mpv zathura
#+begin_src emacs-lisp
(defun org-mpv-open (path)
  (start-process "mpv" nil "mpv" path))
(org-add-link-type "mpv" 'org-mpv-open)

(defun org-zathura-open (path)
	(start-process "zathura" nil "zathura" path))
(org-add-link-type "doc" 'org-zathura-open)
#+end_src

* Dev
Video:[[mpv:/home/khabir/vids/emacs/Emacs_From_Scratch_#8-Build_Your_Own_IDE_with_lsp-mode.webm][JS IDE]]
** Lsp
*** Lsp Mode
There built in major modes for deferent languages like .py .js .c .c++ ...
But for TypeScript (example) you have to download it's major mode
Then Install the server for each language
#+begin_src emacs-lisp

  (defun ahk/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . ahk/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src
*** Lsp UI
#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src
*** Lsp-treemacs 

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp
    :bind(("SPC-e" . 'treemacs)))
(add-hook 'treemacs-mode-hook 'treemacs-toggle-fixed-width)
#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

** Completion
Run the command completion-at-point(C-M-i)
** Functions Help
when you open a parentheses like print( echo area show info about the page you see 1/2, to
go to 2/2 use M-n and M-p
0:21:31: Show also when you hover (not just mouse)
Click with mouse for more info
** References  0:21:54 
built in when you hover
0:24:30: rename in all refrences with C-c l r r 
** Diagnostics
0:26:38: flymake-diagnostics-buffer
** Code Actions
C-c l a a
In python until now it don't work and the light bale don't show up 
** Formatting
Don't work
** Python
You need to import the project when they as you in order to work,
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
  (setq python-indent-offset 2)
#+end_src
*Solving indentation in code blocks*
#+begin_src emacs-lisp
(setq org-startup-indented t)
(setq python-indent-guess-indent-offset t)  
(setq python-indent-guess-indent-offset-verbose nil)
(setq org-edit-src-code-indentation 2)
#+end_src
** JavaScript
#+begin_src emacs-lisp
  (setq js-indent-level 2)
  (add-hook 'prog-mode-hook #'lsp)
#+end_src
** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
* Window Resizing bindings
#+begin_src emacs-lisp
    (global-set-key (kbd "C-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "C-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "C-<down>") 'shrink-window)
    (global-set-key (kbd "C-<up>") 'enlarge-window)
#+end_src






















































































































































































































































* YaySnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yay-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+end_src
** Examples
*** For loop
M-x =yas-new-snippet=
#+begin_export html
# -*- mode: snippet -*-
# name: head 
# key: head 
# --

#+TITLE: ${1:title}
#+PROPERTY: header-args:emacs-lisp :tangle ${2:file}

$0
#+end_export


#+begin_src python
print("hello")
#+end_src
